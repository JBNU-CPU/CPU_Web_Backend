# main.yml
# - Gradle로 스프링 부트를 빌드한 뒤
# - sshpass를 통해 비밀번호 기반 SSH 접속으로 서버에 JAR 파일 배포 및 실행
# - RDS 연결정보는 GitHub Secrets로부터 가져와서 환경 변수로 설정 (spring.profiles.active=rds)
#
# GitHub Secrets 목록 (예시):
#   SERVER_HOST      = 동아리방 서버 IP (또는 도메인)
#   SERVER_USER      = SSH 접속 계정명 (예: cpu)
#   SERVER_PASS      = 해당 계정의 SSH 비밀번호
#   RDS_URL          = JDBC URL (예: jdbc:mysql://...)
#   RDS_USERNAME     = DB 유저 이름
#   RDS_PASSWORD     = DB 비밀번호
#
# 주의사항:
#   - 동아리방 서버 SSH 포트가 2222라면, 아래 -p / -P 옵션 확인
#   - 서버 방화벽에서 2222 포트가 열려 있는지 확인

name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 트리거

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions: Ubuntu 환경
    env:
      ACTIONS_STEP_DEBUG: true  # 디버그 모드(로그 자세히 출력)

    steps:
      # 1) 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) JDK 21 설정 (Temurin)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3) Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4) Gradle로 빌드 (테스트는 -x test 옵션으로 생략)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5) Docker 이미지 빌드 및 태그 지정
      - name: Build Docker image
        run: |
          docker build -t my-spring-app:latest .

      # 6) sshpass 설치 (비밀번호 기반 SSH 자동화)
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      # 7) SSH 연결 테스트 (서버 방화벽 및 SSH 포트 확인)
      - name: Test SSH connection
        run: |
          sshpass -p "${{ secrets.SERVER_PASS }}" ssh \
            -o StrictHostKeyChecking=no \
            -p 2222 \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "echo SSH connection successful"

      # 8) 서버에 JAR 파일 배포 및 애플리케이션 재시작
      - name: Deploy to server
        run: |
          echo "Copying JAR file to server..."
          
          # 프로젝트 파일 (Dockerfile, docker-compose.yml 등) 서버로 전송
               sshpass -p "${{ secrets.SERVER_PASS }}" scp -P 22 -o StrictHostKeyChecking=no \
               docker-compose.yml .env \
               ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/cpu/my-app/
          
          # JAR 파일을 서버로 복사 (scp는 -P 옵션으로 포트 지정)
          sshpass -p "${{ secrets.SERVER_PASS }}" scp \
            -P 2222 \
            -o StrictHostKeyChecking=no \
            build/libs/web-0.0.1-SNAPSHOT.jar \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/cpu/my-app/web-0.0.1-SNAPSHOT.jar

          echo "Deploying new Docker containers..."
          
          # 서버에서 Docker Compose 실행
               sshpass -p "${{ secrets.SERVER_PASS }}" ssh -p 22 -o StrictHostKeyChecking=no \
               ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
               
               cd /home/cpu/my-app
               
               echo "Stopping old containers..."
               docker compose down
               
               echo "Removing old images..."
               docker rmi my-spring-app:latest || true
               
               echo "Building and restarting containers..."
               docker compose up -d --build
               
               echo "Checking running containers..."
               docker ps
          EOF
